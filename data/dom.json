[
  [
    "HTMLのボタンをクリックしたときに関数を実行させる適切な方法は？",
    [
        "addEventListenerを使ってイベントを登録する",
        "setIntervalで定期的に関数を呼ぶ",
        "document.writeで関数を書く",
        "console.logで関数を表示する"
    ],
    "addEventListenerを使ってイベントを登録する",
    "① addEventListenerを使ってイベントを登録する → 正解。イベント駆動の基本的な方法<br>② setIntervalで定期的に関数を呼ぶ → タイマーであってユーザーのクリックとは無関係<br>③ document.writeで関数を書く → HTML出力には使えるが、イベント登録とは関係ない<br>④ console.logで関数を表示する → 表示するだけで実行されない"
  ],
  [
    "DOMから要素を取得する際に、最初に一致した一つの要素だけを取得するには？",
    ["document.querySelector()", "document.querySelectorAll()", "document.getElementsByClassName()", "document.getElementById()"],
    "document.querySelector()",
    "① document.querySelector() → 正解。セレクタに一致する最初の要素を取得する<br>② document.querySelectorAll() → 一致するすべての要素を取得する<br>③ document.getElementsByClassName() → 指定クラスの全要素をHTMLCollectionで取得<br>④ document.getElementById() → ID指定だが、セレクタではない"
  ],
  [
    "input要素の現在の値を取得する正しい方法は？",
    ["element.value", "element.textContent", "element.innerHTML", "element.getAttribute('value')"],
    "element.value",
    "① element.value → 正解。inputやtextareaなどの入力値を取得できる<br>② element.textContent → テキストノードの内容取得。フォーム値には使えない<br>③ element.innerHTML → HTML構造を取得。フォームの入力とは無関係<br>④ element.getAttribute('value') → 初期値は取れるが、ユーザーが入力後の値は取得できない"
  ],
  [
    "新しいdiv要素をJavaScriptで作成するには？",
    ["document.createElement('div')", "new Div()", "document.makeElement('div')", "document.getElement('div')"],
    "document.createElement('div')",
    "① document.createElement('div') → 正解。新規の要素を作成<br>② new Div() → JavaScriptにはDivというクラスは存在しない<br>③ document.makeElement('div') → 存在しないメソッド<br>④ document.getElement('div') → 正しくは getElementById など"
  ],
  [
    "要素を他の要素の子として追加する正しい方法は？",
    ["parent.appendChild(child)", "child.addTo(parent)", "parent.insert(child)", "parent.attachChild(child)"],
    "parent.appendChild(child)",
    "① parent.appendChild(child) → 正解。DOMツリーに子要素を追加する標準的な方法<br>② child.addTo(parent) → 存在しない<br>③ parent.insert(child) → DOMにはこのようなメソッドはない<br>④ parent.attachChild(child) → 非標準で存在しない"
  ],
  [
    "すでにある要素の内容をすべてHTML構造ごと書き換えたい場合に使うプロパティは？",
    ["innerHTML", "textContent", "outerHTML", "value"],
    "innerHTML",
    "① innerHTML → 正解。タグも含めて中身を書き換えできる<br>② textContent → テキストだけを書き換える<br>③ outerHTML → 要素自身も含めて上書きする<br>④ value → inputなどの値であり、内容全体の変更には使わない"
  ],
  [
    "複数のクラス名をJavaScriptで追加するには？",
    ["element.classList.add('a', 'b')", "element.className += ' a b'", "element.addClass('a b')", "element.setClass('a', 'b')"],
    "element.classList.add('a', 'b')",
    "① element.classList.add('a', 'b') → 正解。複数のクラス名を一度に追加できる<br>② element.className += ' a b' += → 動作するが空白ミスなどでバグを生む可能性あり<br>③ element.addClass('a b') → jQueryの書き方。JavaScriptでは使えない<br>④ element.setClass('a', 'b') → 存在しないメソッド"
  ],
  [
    "要素の属性（例えばhrefやsrcなど）を取得するには？",
    ["element.getAttribute('属性名')", "element.attribute", "element.attributes['属性名']", "element.getProp('属性名')"],
    "element.getAttribute('属性名')",
    "① element.getAttribute('属性名') → 正解。任意の属性を取得できる<br>② element.attribute → 存在しないプロパティ<br>③ element.attributes['属性名'] → NamedNodeMapで取得可能だが扱いが複雑<br>④ element.getProp('属性名') → 存在しないメソッド"
  ],
  [
    "あるクラスを要素に持っているかどうかを確認するには？",
    ["element.classList.contains('クラス名')", "element.hasClass('クラス名')", "element.className.includes('クラス名')", "element.classList.has('クラス名')"],
    "element.classList.contains('クラス名')",
    "① element.classList.contains('クラス名') → 正解。クラスを持つか判定できる<br>② element.hasClass('クラス名') → jQueryの書き方。JavaScriptには存在しない<br>③ element.className.includes('クラス名') → 文字列として探すだけで安全ではない<br>④ element.classList.has('クラス名') → 存在しないメソッド"
  ],
  [
    "要素を削除するための正しいメソッドは？",
    ["element.remove()", "element.delete()", "parent.removeChild(element)", "element.removeNode()"],
    "element.remove()",
    "① element.remove() → 正解。対象の要素をDOMから削除できる<br>② element.delete() → 配列やオブジェクトのプロパティに使う。DOM要素には使えない<br>③ parent.removeChild(element) → 正しいが、親要素から呼び出す必要がある<br>④ element.removeNode() → 古いIE専用メソッドで標準ではない"
  ]
]