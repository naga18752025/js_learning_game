[
  [
    "if文で条件が真のときだけ処理を実行する正しい構文は？",
    ["if (条件) { 処理 }", "if 条件 then 処理", "if 条件 do 処理", "if: 処理"],
    "if (条件) { 処理 }",
    "① if (条件) { 処理 } → 正解。JavaScriptの基本構文<br>② if 条件 then 処理 → JavaScriptではthenは使わない（BASICなどの影響）<br>③ if 条件 do 処理 → doはループ文で使うがif文では使わない<br>④ if: 処理 → if: は構文エラー"
  ],
  [
    "switch文でbreakを書かないとどうなる？",
    ["次のcaseに処理が続く", "エラーになる", "switch文が終了する", "defaultに飛ぶ"],
    "次のcaseに処理が続く",
    "① 次のcaseに処理が続く → 正解。fallthrough（落ちていく）という挙動になる<br>② エラーになる → エラーにはならないが注意が必要<br>③ switch文が終了する → 終了せず、次のcaseにも進む<br>④ defaultに飛ぶ → defaultには自動では行かない"
  ],
  [
    "for文で3回ループさせる正しい方法は？",
    ["for(let i = 0; i < 3; i++)", "for(i = 1; i <= 3; i++)", "for(i = 3; i > 0; i--)", "for i in 3"],
    "for(let i = 0; i < 3; i++)",
    "① for(let i = 0; i < 3; i++) → 正解。0から2までの3回ループ<br>② for(i = 1; i <= 3; i++) → 1から3も回るがletがなくスコープ的に不適切<br>③ for(i = 3; i > 0; i--) → 逆順ループ。回数としては3回だが注意が必要<br>④ for i in 3 → Python風でJSには存在しない書き方"
  ],
  [
    "whileループはどんなときに使う？",
    ["条件がtrueの間繰り返す", "配列を回すときだけ", "1回だけ処理したいとき", "必ず3回繰り返すとき"],
    "条件がtrueの間繰り返す",
    "① 条件がtrueの間繰り返す → 正解。whileは真の間だけ繰り返す<br>② 配列を回すときだけ → 配列にはforEachやfor-ofが向いている<br>③ 1回だけ処理したいとき → 1回だけならifでよい<br>④ 必ず3回繰り返すとき → 必ず回す回数にはfor文が適切"
  ],
  [
    "次のうち、無限ループを構成するfor文の正しい構文は？",
    ["for(;;)", "for(true)", "for(let i = 0;;)", "for(i < 10)"],
    "for(;;)",
    "① for(;;) → 正解。初期化・条件・増減のすべてを省略した構文で無限ループになる<br>② for(true → forの条件にtrueを書くのは文法エラー<br>③ for(let i = 0;;) → 条件がないため無限ループにはなるが、初期化部分にi < 10は不適切な構文<br>④ for(i < 10) → 条件部分だけ書く形式は構文エラー"
  ],
  [
    "配列を最も簡潔にループ処理できる構文はどれ？",
    ["for-of", "forEach", "while", "for文"],
    "forEach",
    "① forEach → 正解。配列に特化しており、コールバックで簡潔に書ける<br>② for-of → シンプルだが関数の引数が使えないなど制限もある<br>③ while → インデックスの管理が必要で手間が増える<br>④ for文 → 柔軟だが、初期化・条件・増分を毎回書く必要がある"
  ],
  [
    "continue文の役割は？",
    ["その回のループをスキップ", "ループを終了する", "例外をスローする", "処理を一時停止する"],
    "その回のループをスキップ",
    "① その回のループをスキップ → 正解。以降の処理を飛ばし次のループへ<br>② ループを終了する → 終了にはbreakを使う<br>③ 例外をスローする → throwで例外を発生させる<br>④ 処理を一時停止する → 処理の一時停止には使えない"
  ],
  [
    "break文はいつ使う？",
    ["ループやswitchから抜けたいとき", "関数を終了するとき", "条件をチェックするとき", "ブラウザを停止したいとき"],
    "ループやswitchから抜けたいとき",
    "① ループやswitchから抜けたいとき → 正解。breakは中断用<br>② 関数を終了するとき → 関数終了はreturnを使う<br>③ 条件をチェックするとき → 条件チェックにはifを使う<br>④ ブラウザを停止したいとき → ブラウザ停止はできない（セキュリティ的に不可）"
  ],
  [
    "try...catch文の使い道は？",
    ["エラー発生時の処理を書く", "HTMLを取得する", "イベントを登録する", "ループを止める"],
    "エラー発生時の処理を書く",
    "① エラー発生時の処理を書く → 正解。例外処理を安全に行える<br>② HTMLを取得する → HTML取得には関係ない<br>③ イベントを登録する → イベント登録とは無関係<br>④ ループを止める → ループには使わない"
  ],
  [
    "if...else if...else構文の正しい順番は？",
    ["if → else if → else", "else → if → else if", "else if → if → else", "どの順番でも良い"],
    "if → else if → else",
    "① 「if → else if → else」 → 正解。条件を上から順に評価する構文<br>② 「else → if → else if」 → elseは最後に使うのがルール<br>③ 「else if → if → else」 → else ifが先では構文エラーになる<br>④ 「どの順番でも良い」 → 書き順には明確なルールがある"
  ]
]