[
  [
    "console.logの主な用途は何か？",
    ["値や状態の出力", "変数の宣言", "関数の定義", "HTMLの変更"],
    "値や状態の出力",
    "① 値や状態の出力 → 正解。console.logは主にデバッグ時に値や状態を確認する目的で使う<br>② 変数の宣言 → 変数の宣言にはlet/const/varを使う<br>③ 関数の定義 → 関数の定義はfunctionやアロー関数などで行う<br>④ HTMLの変更 → HTMLの変更はDOM操作（innerHTMLなど）で行う"
  ],
  [
    "JavaScriptのエラーで「Uncaught ReferenceError」と表示された場合、考えられる原因は？",
    ["存在しない変数を参照している", "配列の要素数が多すぎる", "セミコロンが多すぎる", "CSSの文法ミス"],
    "存在しない変数を参照している",
    "① 存在しない変数を参照している → 正解。ReferenceErrorは未定義の変数を使おうとしたときに発生<br>② 配列の要素数が多すぎる → 要素数が多くてもエラーにはならない<br>③ セミコロンが多すぎる → セミコロンの多さ自体でこのエラーにはならない<br>④ CSSの文法ミス → JavaScriptのReferenceErrorはCSSとは関係ない"
  ],
  [
    "console.table() を使うとどうなる？",
    ["表形式でデータが表示される", "文字列が太字になる", "コンソールがクリアされる", "関数の中身が表示される"],
    "表形式でデータが表示される",
    "① 表形式でデータが表示される → 正解。console.tableは配列やオブジェクトを見やすい表で表示する<br>② 文字列が太字になる → 太字表示はされない。スタイル指定にはconsole.log + %cが必要<br>③ コンソールがクリアされる → コンソールのクリアはconsole.clear()<br>④ 関数の中身が表示される → 関数の中身ではなく、引数として渡されたデータを表示"
  ],
  [
    "デベロッパーツールの「Sources」タブの主な用途は？",
    ["ブレークポイントでコードを一時停止", "CSSを変更する", "HTML構造を編集", "サーバー設定を変更"],
    "ブレークポイントでコードを一時停止",
    "① ブレークポイントでコードを一時停止 → 正解。Sourcesタブではブレークポイントを設定し、実行を一時停止できる<br>② CSSを変更する → CSSの編集は「Elements」タブで行う<br>③ HTML構造を編集 → HTMLの構造編集も「Elements」タブが主<br>④ サーバー設定を変更 → サーバー設定はブラウザのツールでは変更不可"
  ],
  [
    "console.error() の出力はどのように見える？",
    ["赤い文字で表示される", "太字の青い文字", "何も表示されない", "画面にポップアップが出る"],
    "赤い文字で表示される",
    "① 赤い文字で表示される → 正解。errorは通常赤色で目立つように表示される<br>② 太字の青い文字 → 太字の青は標準出力では見られない<br>③ 何も表示されない → 出力されないわけではない<br>④ 画面にポップアップが出る → ポップアップはalertなどで出す"
  ],
  [
    "JavaScriptでデバッグを中断できるキーワードは？",
    ["debugger", "pause", "breakpoint", "halt"],
    "debugger",
    "① debugger → 正解。debugger; をコードに書くと、開発者ツールが有効ならそこで停止する<br>② pause → pauseはキーワードではない<br>③ breakpoint → breakpointはツール上の機能名で、コードでは使えない<br>④ halt → haltもJavaScriptの文法にはない"
  ],
  [
    "console.dir() の主な特徴は？",
    ["オブジェクトのプロパティを階層的に表示", "数値を丸めて表示する", "文字列をすべて大文字に変換", "DOMのHTML構造を表示"],
    "オブジェクトのプロパティを階層的に表示",
    "① オブジェクトのプロパティを階層的に表示 → 正解。console.dirはオブジェクト構造の詳細を出力するのに適している<br>② 数値を丸めて表示する → 数値の丸め処理は行わない<br>③ 文字列をすべて大文字に変換 → 大文字変換は関数やメソッドで行う<br>④ DOMのHTML構造を表示 → HTML構造の表示はconsole.logやElementsタブが向いている"
  ],
  [
    "console.clear() を使うと何が起こる？",
    ["コンソールの出力が全消去される", "スクリプトが停止する", "HTMLがリロードされる", "JavaScriptが無効になる"],
    "コンソールの出力が全消去される",
    "① コンソールの出力が全消去される → 正解。現在までのconsole出力を全て消す命令<br>② スクリプトが停止する → スクリプトはそのまま実行され続ける<br>③ HTMLがリロードされる → ページのリロードはされない<br>④ JavaScriptが無効になる → JSの無効化はできない（手動設定が必要）"
  ],
  [
    "開発者ツールの「Console」タブでできないことは？",
    ["HTML構造の変更", "ログの確認", "JavaScriptの一時実行", "エラーメッセージの確認"],
    "HTML構造の変更",
    "① HTML構造の変更 → 正解。HTML構造の変更はConsoleではなくElementsタブを使用<br>② ログの確認 → ログの確認はConsoleの基本機能<br>③ JavaScriptの一時実行 → 一時的なJSコードの入力・実行が可能<br>④ エラーメッセージの確認 → エラーメッセージもここで表示される"
  ],
  [
    "Chromeの開発者ツールでconsole.logの出力が見られないとき、まず確認すべきことは？",
    ["フィルター設定", "HTMLのDOCTYPE", "windowサイズ", "キャッシュのクリア"],
    "フィルター設定",
    "① フィルター設定 → 正解。consoleの出力はフィルターで非表示になることがある<br>② HTMLのDOCTYPE → DOCTYPEは主にHTMLの互換表示に関係する<br>③ windowサイズ → ウィンドウサイズは表示領域に影響するが、出力そのものには関係しない<br>④ キャッシュのクリア → キャッシュは主にリソース読み込みに関係"
  ]
]